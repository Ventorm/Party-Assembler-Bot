const express = require('express')
const { default: axios } = require('axios')
const { Telegraf, Markup } = require('telegraf')
const schedule = require('node-schedule');

const { texts } = require('./texts')
const { httpDB, PORT, token, end_time, before_reminder, admin, twinkByAdmin, mainGroup, adminHelper, botID} = require('./const.data.js')
const playersAPI = require('./players/players.API.js');
const gamesAPI = require('./games/games.API.js');
const pollsAPI = require('./polls/polls.API.js');
const player_timeAPI = require('./player_time/player_time.API.js');
const player_gameAPI = require('./player_game/player_game.API.js');
const player_voteAPI = require('./player_vote/player_vote.API.js');
const player_settingsAPI = require('./player_settings/player_settings.API.js');


const bot = new Telegraf(token)


//#region Functions
const getStarted = async function (ctx) {
  const id = ctx.update.message.from.id;
  const user = (await playersAPI.get(id)).data;
  if (!user) {
    await ctx.reply(texts.welcome);
    setTimeout(async () => {
      await ctx.reply(texts.confirm);
    }, 1500);
    
  }
}


const newPlayer = async function(ctx, invited_from) {
  const user = ctx.update.message.from;
  const data = {'id': user.id, 'username': user.username, 'first_name': user.first_name, 'last_name': user.last_name, 'invited_from': invited_from};

  const newUser = (await playersAPI.create(data));
  const userSettings = (await player_settingsAPI.create(user.id))

  return newUser
}


const addToMailing = async function(user_id) {
  const polls = (await pollsAPI.getAll()).data
  if (polls[0].message_id) {
    const player_vote = await (await player_voteAPI.get(user_id)).data
    if (!player_vote) {
      sendMessage(user_id, texts.justJoined)
      setTimeout(async () => {
        forwardMessage(user_id, polls[0].message_id)
        player_voteAPI.create(user_id)
      }, 3000);
    }
  }
}


const groupInvitationButtons = Markup.inlineKeyboard([
  [Markup.button.url('üëâ –ü–µ—Ä–µ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É üëà', 'https://t.me/+AoRKG2Wb3_Y2MTBi')]
])


const personalActions = [`disablePersonalResult`,
`enablePersonalResult`,
`personal_45`,
`personal_30`,
`personal_15`,
`personal_5`,
`personal_-1`,
`showFullSettings`]


const fullActions = [`disableFullResult`,
`enableFullResult`,
`full_45`,
`full_30`,
`full_15`,
`full_5`,
`full_-1`,
`showPersonalSettings`]


const settingsButtons = async function (ctx, personal = true, updatedData = undefined) {
  let player_id;
  if (!personal || ctx.update.callback_query) {
      player_id = ctx.update.callback_query.from.id
  }
  else {
      player_id = ctx.update.message.from.id
  }

  let currentSettings;
  if (updatedData) {
    currentSettings = updatedData
  }
  
  if (!updatedData) {
      if (personal) {
          currentSettings = (await player_settingsAPI.get(player_id)).data[0]
      }
      else {
          currentSettings = (await player_settingsAPI.get(player_id)).data[1]
      }
  }

  let mark1 = '', mark2 = '', mark3 = '', mark4 = '', mark5 = ''
  switch (currentSettings.before_reminder) {
    case 45:
      mark1 = 'üü¢'
      break;
    case 30:
      mark2 = 'üü¢'
      break;
    case 15:
      mark3 = 'üü¢'
      break;
    case 5:
      mark4 = 'üü¢'
      break;
    case -1:
      mark5 = 'üü¢'
      break;
  }

  let show_settings = {
      notification_text: ``,
      notification_command: ``,
      other_schedule_text: ``,
      other_schedule_command: ``,
      enable_disable_switch: ``
  }
  if (personal) {
      show_settings.notification_text = `–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è`
      show_settings.notification_command = `personal`
      show_settings.other_schedule_text = `üëâ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –û–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üëà`
      show_settings.other_schedule_command = 'showFullSettings'
      if (currentSettings.enabled) {
        show_settings.enable_disable_switch = [Markup.button.callback(`üö´ –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üö´`, 'disablePersonalResult')]
      }
      if (!currentSettings.enabled) {
        show_settings.enable_disable_switch = [Markup.button.callback(`üì£ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üì£`, 'enablePersonalResult')]
      }
  }
  if (!personal) {
      show_settings.notification_text = `–û–±—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è`
      show_settings.notification_command = `full`
      show_settings.other_schedule_text = `üëâ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üëà`
      show_settings.other_schedule_command = 'showPersonalSettings'
      if (currentSettings.enabled) {
        show_settings.enable_disable_switch = [Markup.button.callback(`üö´ –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –û–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üö´`, 'disableFullResult')]
      }
      if (!currentSettings.enabled) {
        show_settings.enable_disable_switch = [Markup.button.callback(`üì£ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –û–±—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ üì£`, 'enableFullResult')]
      }
  }    
  
  let buttons = Markup.inlineKeyboard([
      [Markup.button.callback(`45 –º–∏–Ω—É—Ç ${mark1}`, `${show_settings.notification_command}_45`), 
      Markup.button.callback(`30 –º–∏–Ω—É—Ç ${mark2}`, `${show_settings.notification_command}_30`)],
      [Markup.button.callback(`15 –º–∏–Ω—É—Ç ${mark3}`, `${show_settings.notification_command}_15`), 
      Markup.button.callback(`5 –º–∏–Ω—É—Ç ${mark4}`, `${show_settings.notification_command}_5`)],
      [Markup.button.callback(`–û—Ç–∫–ª—é—á–∏—Ç—å ${show_settings.notification_text} ${mark5}`, `${show_settings.notification_command}_-1`)],
      show_settings.enable_disable_switch,
      [Markup.button.callback(show_settings.other_schedule_text, show_settings.other_schedule_command)],
      [Markup.button.callback('–°–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫', 'delete')]
  ])

  return buttons

}



const testButton = Markup.inlineKeyboard([
  [Markup.button.url('Hello there', 'https://t.me/+AoRKG2Wb3_Y2MTBi')]
])


const deleteButton = Markup.inlineKeyboard([
  [Markup.button.callback('–°–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ  üóë', 'delete')]
])


const actionProcessing = async function (ctx) {
  let player_id;
  if (ctx.update.message) {
    player_id = ctx.update.message.from.id
  }
  if (ctx.update.callback_query){
    player_id = ctx.update.callback_query.from.id
  }
  
  const data = ctx.update.callback_query.data
  let createButtons; 
  let updatedData;    
  let player_vote;

  switch (data) {
    // –ø—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞ –∫–∞–∫—É—é –∫–Ω–æ–ø–∫—É –∏–∑ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±—ã–ª–æ –Ω–∞–∂–∞—Ç–∏–µ
    case `showFullSettings`:
      createButtons = await settingsButtons(ctx, false)
      await ctx.deleteMessage()
      await ctx.replyWithHTML(texts.forButtonFullReminder, createButtons)
      break;

    case `personal_45`:
      updatedData = (await player_settingsAPI.update(player_id, true, {before_reminder: 45})).data[0]
      await ctx.deleteMessage()
      await ctx.replyWithHTML(texts.forButtonPersonalReminder, await settingsButtons(ctx, true, updatedData))
      break;

    case `personal_30`:
      updatedData = (await player_settingsAPI.update(player_id, true, {before_reminder: 30})).data[0]
      await ctx.deleteMessage()
      await ctx.replyWithHTML(texts.forButtonPersonalReminder, await settingsButtons(ctx, true, updatedData))
      break;

    case `personal_15`:
      updatedData = (await player_settingsAPI.update(player_id, true, {before_reminder: 15})).data[0]
      await ctx.deleteMessage()
      await ctx.replyWithHTML(texts.forButtonPersonalReminder, await settingsButtons(ctx, true, updatedData))
      break;

    case `personal_5`:
      updatedData = (await player_settingsAPI.update(player_id, true, {before_reminder: 5})).data[0]
      await ctx.deleteMessage()
      await ctx.replyWithHTML(texts.forButtonPersonalReminder, await settingsButtons(ctx, true, updatedData))
      break;

    case `personal_-1`:
      updatedData = (await player_settingsAPI.update(player_id, true, {before_reminder: -1})).data[0]
      await ctx.deleteMessage()
      await ctx.replyWithHTML(texts.forButtonPersonalReminder, await settingsButtons(ctx, true, updatedData))
      break;

    case `disablePersonalResult`:
      updatedData = (await player_settingsAPI.update(player_id, true, {enabled: false})).data[0]
      player_vote = (await player_voteAPI.get(player_id)).data
      if (player_vote) {
        if (player_vote.filled_all_polls) {
          if (player_vote.personal_result_message_id) {
            await player_voteAPI.update(player_id, {personal_result_message_id: null})
            await deleteMessage(player_id, player_vote.personal_result_message_id)
          }
        }
      }
      await ctx.deleteMessage()
      await ctx.replyWithHTML(texts.forButtonPersonalReminder, await settingsButtons(ctx, true, updatedData))
      break;

    case `enablePersonalResult`:
      updatedData = (await player_settingsAPI.update(player_id, true, {enabled: true})).data[0]
      player_vote = (await player_voteAPI.get(player_id)).data
      if (player_vote) {
        if (player_vote.filled_all_polls) {
          if (player_vote.personal_result_message_id === null) {
            await sendAllResultMessages(player_id, player_vote)
          }
        }
      }
      await ctx.deleteMessage()
      await ctx.replyWithHTML(texts.forButtonPersonalReminder, await settingsButtons(ctx, true, updatedData))
      break;      

    // –ø—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞ –∫–∞–∫—É—é –∫–Ω–æ–ø–∫—É –∏–∑ –û–±—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±—ã–ª–æ –Ω–∞–∂–∞—Ç–∏–µ
    case `showPersonalSettings`:
      createButtons = await settingsButtons(ctx, true)
      await ctx.deleteMessage()
      await ctx.replyWithHTML(texts.forButtonPersonalReminder, createButtons)
      await ctx.answerCbQuery()
      break;

    case `full_45`:
      updatedData = (await player_settingsAPI.update(player_id, false, {before_reminder: 45})).data[0]
      await ctx.deleteMessage()
      await ctx.replyWithHTML(texts.forButtonFullReminder, await settingsButtons(ctx, false, updatedData))
      break;

    case `full_30`:
      updatedData = (await player_settingsAPI.update(player_id, false, {before_reminder: 30})).data[0]
      await ctx.deleteMessage()
      await ctx.replyWithHTML(texts.forButtonFullReminder, await settingsButtons(ctx, false, updatedData))
      break;

    case `full_15`:
      updatedData = (await player_settingsAPI.update(player_id, false, {before_reminder: 15})).data[0]
      await ctx.deleteMessage()
      await ctx.replyWithHTML(texts.forButtonFullReminder, await settingsButtons(ctx, false, updatedData))
      break;

    case `full_5`:
      updatedData = (await player_settingsAPI.update(player_id, false, {before_reminder: 5})).data[0]
      await ctx.deleteMessage()
      await ctx.replyWithHTML(texts.forButtonFullReminder, await settingsButtons(ctx, false, updatedData))
      break;

    case `full_-1`:
      updatedData = (await player_settingsAPI.update(player_id, false, {before_reminder: -1})).data[0]
      await ctx.deleteMessage()
      await ctx.replyWithHTML(texts.forButtonFullReminder, await settingsButtons(ctx, false, updatedData))
      break;

    case `disableFullResult`:
      updatedData = (await player_settingsAPI.update(player_id, false, {enabled: false})).data[0]
      player_vote = (await player_voteAPI.get(player_id)).data
      if (player_vote) {
        if (player_vote.filled_all_polls) {
          if (player_vote.full_result_message_id) {
            await player_voteAPI.update(player_id, {full_result_message_id: null})
            await deleteMessage(player_id, player_vote.full_result_message_id)
          }
        }
      }
      await ctx.deleteMessage()
      await ctx.replyWithHTML(texts.forButtonFullReminder, await settingsButtons(ctx, false, updatedData))
      break;

    case `enableFullResult`:
      updatedData = (await player_settingsAPI.update(player_id, false, {enabled: true})).data[0]
      player_vote = (await player_voteAPI.get(player_id)).data
      if (player_vote) {
        if (player_vote.filled_all_polls) {
          if (player_vote.full_result_message_id === null) {
            await sendAllResultMessages(player_id, player_vote)
          }
        }
      }
      await ctx.deleteMessage()
      await ctx.replyWithHTML(texts.forButtonFullReminder, await settingsButtons(ctx, false, updatedData))
      break;
  }
}


const sendQuiz = async function (chat_id, question, options, correct_option_id = 0, explanation = '', anonymous = false, type = 'quiz', method = 'sendPoll') {
  question = encodeURIComponent(question)
  options = encodeURIComponent(JSON.stringify(options))
  explanation = encodeURIComponent(explanation)
  const url = `https://api.telegram.org/bot${token}/${method}?chat_id=${chat_id}&question=${question}&options=${options}&is_anonymous=${anonymous}&type=${type}&correct_option_id=${correct_option_id}&explanation=${explanation}`

  const result = (await axios.post(url)).data.result.message_id

}


const sendPoll = async function (chat_id, question, options, multiple_answers = true, anonymous = false, type = 'regular', method = 'sendPoll') {
  question = encodeURIComponent(question)
  options = encodeURIComponent(JSON.stringify(options))
  const url = `https://api.telegram.org/bot${token}/${method}?chat_id=${chat_id}&question=${question}&options=${options}&is_anonymous=${anonymous}&allows_multiple_answers=${multiple_answers}&type=${type}`

  try {
    const result = (await axios.post(url)).data.result
    return result
  } catch (error) {
    console.log(error.response.data.description)
  }
}


const stopPolls = async function() {
  const method = 'stopPoll'
  const polls = (await pollsAPI.getAll()).data
  polls.forEach(async poll => {
    if (poll.message_id) {

      const url = `https://api.telegram.org/bot${token}/${method}?chat_id=${twinkByAdmin}&message_id=${poll.message_id}`;
      try {
        const result = (await axios.get(url)).data.result
      } catch (error) {
        console.log(error.response.data.description)
      }
    }
  });
  await player_voteAPI.deleteAll()
  await player_gameAPI.deleteAll()
  await player_timeAPI.deleteAll()
  return (await pollsAPI.updateAll())
}


const createCurrentTimeStamp = function () {
  const today = new Date();
  const year = today.getFullYear();
  const month = today.getMonth() + 1;
  const date = today.getDate();
  const hours = today.getHours();
  const minutes = today.getMinutes();
  const seconds = today.getSeconds();
  return `${year}-${month}-${date} ${hours}:${minutes}:${seconds}`;
}


const sendMessage = async function (chat_id, content, buttons = false, parse_mode = 'HTML') {
  const method = 'sendMessage'
  const type = 'text'
  content = encodeURIComponent(content);
  let url = `https://api.telegram.org/bot${token}/${method}?chat_id=${chat_id}&${type}=${content}&parse_mode=${parse_mode}`

  if (buttons) {
    url += `&reply_markup=${encodeURIComponent(JSON.stringify(buttons.reply_markup))}`
  }
  
  try {
    const result = (await axios.post(url)).data.result.message_id  
    return result
  } catch (error) {
    console.log(error.response.data.description)
  }
}


const editMessage = async function (chat_id, newText = '', message_id, buttons = false, parse_mode = 'HTML') {
  const method = 'editMessageText'
  newText = encodeURIComponent(newText);
  let url = `https://api.telegram.org/bot${token}/${method}?chat_id=${chat_id}&message_id=${message_id}&text=${newText}&parse_mode=${parse_mode}`

  if (buttons) {
    url += `&reply_markup=${encodeURIComponent(JSON.stringify(buttons.reply_markup))}`
  }

  try {
    const result = (await axios.get(url)).data.result.message_id
    return result
  } catch (error) {
    console.log(error.response.data.description)
  }
}


const forwardMessage = async function (chat_id, message_id, method = 'forwardMessage') {
  const url = `https://api.telegram.org/bot${token}/${method}?chat_id=${chat_id}&from_chat_id=${twinkByAdmin}&message_id=${message_id}`
  
  try {
    const result = (await axios.post(url)).data.result.message_id  
    return result
  } catch (error) {
    console.log(error.response.data.description)
  }
}


const deleteMessage = async function (chat_id, message_id, method = 'deleteMessage') {
  const url = `https://api.telegram.org/bot${token}/${method}?chat_id=${chat_id}&message_id=${message_id}`

  try {
    const result = (await axios.post(url)).data
    return result
  } catch (error) {
    console.log(error.response.data.description)
  }
  
}


const pinMessage = async function (chat_id, message_id, disable_notification = true, method = 'pinChatMessage') {
  const url = `https://api.telegram.org/bot${token}/${method}?chat_id=${chat_id}&message_id=${message_id}&disable_notification=${disable_notification}`
  //const result = (await axios.post(url)).data.result.message_id
  try {
    const result = (await axios.post(url)).data
    return result
  } catch (error) {
    console.log(error.response.data.description)
  }
  
}


const unpinMessage = async function (chat_id, message_id, method = 'unpinChatMessage') {
  const url = `https://api.telegram.org/bot${token}/${method}?chat_id=${chat_id}&message_id=${message_id}`
  //const result = (await axios.post(url)).data.result.message_id
  try {
    const result = (await axios.post(url)).data
    return result
  } catch (error) {
    console.log(error.response.data.description)
  }
}


const textProcessing = async function (ctx) {
  const sender = ctx.message.from;
  const incomingText = ctx.message.text;
  const created = (await playersAPI.get(sender.id)).data
  if (created) {

    return ''
  }

  else {
    const referal = parseInt(incomingText)
    if (!isNaN(referal)) {
      if (typeof(referal) === 'number') {
        const referalData = (await playersAPI.get(referal)).data
        if (referalData) {
          await newPlayer(ctx, referal);
          await sendMessage(sender.id, texts.allowed)
          setTimeout(async () => {
            await ctx.reply(texts.shortInfo, groupInvitationButtons);
          }, 1500);
          setTimeout(async () => {
            await addToMailing(sender.id);
          }, 3000);
        }
      }
    }
  }
}


const pollsCreatedToday = async function() {
  //–±–µ—Ä—ë–º –¥–∞—Ç—É —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–ø—Ä–æ—Å–∞ (–∏–≥—Ä—ã)
  const currentDate = new Date();
  const polls = (await pollsAPI.getAll()).data
  const was_created = new Date(Date.parse(polls[0].was_created));

  const dayComparsion = (currentDate.getDate() - was_created.getDate());
  const monthComparsion = (currentDate.getMonth() - was_created.getMonth());

  if (dayComparsion === 0 && monthComparsion === 0) {
    return true
  }
  return false
}


const beforeMailing = async function (polls, sender) {  
  if (await pollsCreatedToday()) {
    return sendMessage(sender.id, '–°–µ–≥–æ–¥–Ω—è –æ–ø—Ä–æ—Å—ã —É–∂–µ —Å–æ–∑–¥–∞–≤–∞–ª–∏, –∑–∞–≤—Ç—Ä–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ')
  }
  else {
    const currentDate = new Date();
    let hours = currentDate.getHours();
    let minutes = currentDate.getMinutes();
    if (hours === end_time + 1 || (hours === end_time && minutes >= 30)) {
      return sendMessage(sender.id, `–£–∂–µ —Å–ª–∏—à–∫–æ–º –ø–æ–∑–¥–Ω–æ üåí\n–ü—Ä–µ–¥–ª–∞–≥–∞—é –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–≤—Ç—Ä–∞ üå§`)
    }
    if (hours < 8 || (hours === 8 && minutes < 30)) {
      return sendMessage(sender.id, `–î–∞–≤–∞–π –Ω–µ –±—É–¥–µ–º –æ–ø–æ–≤–µ—â–∞—Ç—å –≤—Å–µ—Ö –≤ —Ç–∞–∫–æ–µ –≤—Ä–µ–º—è üò¥`)
    }
    return mailing(hours, minutes, sender)
  }  
}


const mailing = async function (hours, minutes, sender) {
  if (hours < end_time - 1 || (hours === end_time - 1 && minutes < 30)) {
    const checkPoll = await createCheckPoll(true)
    const gamePoll = await createGamePoll()
    const timePoll = await createTimePoll()
        
    await pollsAPI.update(1, checkPoll.poll.id, checkPoll.message_id)
    await pollsAPI.update(2, gamePoll.poll.id, gamePoll.message_id)
    await pollsAPI.update(3, timePoll.poll.id, timePoll.message_id)

    enableResultUpdates()

    mailingFirstPoll(checkPoll.message_id)    
  }
  else {
    const checkPoll = await createCheckPoll(false)
    const gamePoll = await createGamePoll()

    await pollsAPI.update(1, checkPoll.poll.id, checkPoll.message_id)
    await pollsAPI.update(2, gamePoll.poll.id, gamePoll.message_id)

    enableResultUpdates()

    mailingFirstPoll(checkPoll.message_id)
  }

  if (sender.id !== admin) {
    if (!sender.username) {
      sender.username = ``
    }
    if (!sender.first_name) {
      sender.first_name = ``
    }
    if (!sender.last_name) {
      sender.last_name = ``
    }
    sendMessage(admin, `–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä –æ–ø—Ä–æ—Å–æ–≤:\n<b>${sender.first_name} ${sender.last_name}\n${sender.username}</b>`)
  }
}


const mailingFirstPoll = async function (message_id) {
  const players = (await playersAPI.getAll()).data
  players.forEach(element => {
    player_voteAPI.create(element.id)
    forwardMessage(element.id, message_id)
  });
  return '–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–ø–µ—Ä–≤—ã–π –æ–ø—Ä–æ—Å)'
}


const createCheckPoll = async function (normal = true) {
  if (normal) {
    const result = await sendPoll(twinkByAdmin, texts.letsPlay.question, texts.letsPlay.answers, false)
    return result;
  }
  if (!normal) {
    const result = await sendPoll(twinkByAdmin, texts.letsPlayRightNow.question, texts.letsPlayRightNow.answers, false)
    return result;
  }
}


const createTimePoll = async function () {
  const time_options = await createTimeOptions(true)
  
  const result = await sendPoll(twinkByAdmin, texts.chooseTime, time_options);
  return result;
}


const createGamePoll = async function () {
  const allGames = (await gamesAPI.getAll()).data
  let games = []
  allGames.forEach(game => {
    games.push(game.name)
  });

  const result = await sendPoll(twinkByAdmin, texts.chooseGame, games)
  return result
}


const enableResultUpdates = async function () {
  const intervalCheck = schedule.scheduleJob(`*/5 * * * *`, async function()  {
    const now = new Date();
    const hours = now.getHours()
    const minutes = now.getMinutes()
    if (hours === end_time + 1 || (hours === end_time && minutes >= 30)) {
      await stopPolls()
      return await schedule.gracefulShutdown();
    }    

    await updateAllResultMessages()    
  })
}


const createEmptyResult = async function () {
  const games = (await gamesAPI.getAll()).data
  let emptyResult = []
  const available_time_options = await createTimeOptions(false)

  for (let time_id = 0; time_id < available_time_options.length; time_id++) {
    emptyResult.push([])
    games.forEach(game => {
      emptyResult[time_id].push({
          'name': game.name,
          'current_players': [],
          'min_players': game.min_players,
          'max_players': game.max_players,
          //'current_count': 0
      })
    });
  }

  return emptyResult
}


const createFilledResult = async function () {
  const filledResult = []
  const emptyResult = await createEmptyResult()
  const games = (await gamesAPI.getAll()).data
  const game_time_players = (await playersAPI.getAll(false)).data
  
  for (let time_id = 0; time_id < emptyResult.length; time_id++) {
    // –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞ –∫–∞–∂–¥—É—é –æ–ø—Ü–∏—é –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –µ—ë –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    filledResult.push([])
    for (let game_id = 0; game_id < games.length; game_id++) {
      // –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å–≤–æ–∏–º –∏–≥—Ä–∞–º –∏ –≤—Ä–µ–º–µ–Ω–∏
      game_time_players.forEach(player_option => {
        if ((player_option.time === end_time - time_id) && (player_option.game_id === game_id)) {
          emptyResult[time_id][game_id].current_players.push(player_option.player_id)
          //emptyResult[time_id][game_id].current_count++
        }
      });
      // —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –≤—Ä–µ–º—è –∏ –∏–≥—Ä—É, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –Ω–∞–±—Ä–∞–ª–æ—Å—å –∏–≥—Ä–æ–∫–æ–≤. –ï—Å–ª–∏ –¥–∞, —Ç–æ –∑–∞–ø–æ–ª–Ω—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —ç—Ç–æ–π –∏–≥—Ä–æ–π –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–∞—Å—Å–∏–≤ –≤—Ä–µ–º–µ–Ω–∏
      const min_players = emptyResult[time_id][game_id].min_players
      const current_players = emptyResult[time_id][game_id].current_players.length
      if (current_players >= min_players) {
          filledResult[time_id].push(emptyResult[time_id][game_id])
      }
    }
  }
  
  return filledResult
}


const createPersonalResult = async function (player_id, filledResult) {
  const game_time_players = (await playersAPI.getAll(false)).data
  player_id = player_id.toString()
  let player_times = new Set()
  // –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ –ë–î –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤ –Ω–∏—Ö –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å—Ç–∞—Ç—É—Å
  for (let game_time_option = 0; game_time_option < game_time_players.length; game_time_option++) {
    if (game_time_players[game_time_option].player_id === player_id) {
      player_times.add(game_time_players[game_time_option].time)
    }
  }

  // –ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –∏–≥—Ä–æ–∫ –≤ –æ–±—â–µ–π –≤—ã–±–æ—Ä–∫–µ –∏–∑ –ë–î
  if (player_times.size === 0) {
    const ready_to_play = (await player_voteAPI.get(player_id)).data.ready_to_play
    // –ø—Ä–æ–≤–µ—Ä–∫–∞, –ø–µ—Ä–µ–¥—É–º–∞–ª –ª–∏ –∏–≥—Ä–æ–∫
    if (!ready_to_play) {
      return `cant_play`
    }
    // –µ—Å–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø–æ–ª–Ω–∏–ª –æ–ø—Ä–æ—Å—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä –æ—Ç–º–µ–Ω–∏–ª –≤—Ä–µ–º—è –∏/–∏–ª–∏ –∏–≥—Ä—ã, –Ω–æ –ø–æ—Å—Ç–∞–≤–∏–ª —Å–Ω–æ–≤–∞
    else {
      return `incorrectly_filled_by_user`
    }
  }
  
  // –ø—Ä–æ–≤–µ—Ä–∫–∞, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–º –æ–ø—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –Ω–∞ –æ—Å—Ç–∞—Ç–æ–∫ –¥–Ω—è
  const currentHour = (new Date()).getHours();
  let actialTimes = false
  player_times.forEach(time => {
    if (time >= currentHour) {
      actialTimes = true
    }
  });
  if (!actialTimes) {
    return `no_time_left`
  }

  // –Ω–∞–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä–∞–º–∏
  let personal_filled_result = []
  let total_games = 0
  for (let time_option = 0; time_option < filledResult.length; time_option++) {
    // –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞ –∫–∞–∂–¥—É—é –æ–ø—Ü–∏—é –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –µ—ë –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    personal_filled_result.push([])
    for (let game_option = 0; game_option < filledResult[time_option].length; game_option++) {
      // –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –∏–≥—Ä—É –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –≤—Ä–µ–º—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–Ω –≤ —Å–ø–∏—Å–∫–µ –∂–µ–ª–∞—é—â–∏—Ö
      let current_game_time = filledResult[time_option][game_option]
      if ((current_game_time).current_players.includes(player_id)) {
        personal_filled_result[time_option].push(current_game_time)
        total_games++
      }
    }
  }
  // –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∏ 1 –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∏–≥—Ä–æ–∫—É –∏–≥—Ä—ã
  if (total_games === 0) {
    return `not_enough_players`
  }
  
  return personal_filled_result
}


const setResultToNormal = async function (resultObject, fullResult = true, player_id = undefined) {
  let normalResult = ``
  const currentDate = new Date()
  const currentTime = ('0' + currentDate.getHours().toString()).slice(-2) + ':' + ('0' + currentDate.getMinutes().toString()).slice(-2);
  if (!fullResult) {
    normalResult += `<b>–ü–ï–†–°–û–ù–ê–õ–¨–ù–û–ï –†–ê–°–ü–ò–°–ê–ù–ò–ï  üéØ</b>\n<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ –≤ <b>${currentTime}</b></i>`
    // –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —è–≤–ª—è–µ—Ç—Å—è –¥–≤—É–º–µ—Ä–Ω—ã–º –º–∞—Å—Å–∏–≤–æ–º, –∞ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
    if (typeof(resultObject) !== `string`) {
      for (let time_option = 0; time_option < resultObject.length; time_option++) {
  
        let currentHour = (end_time - time_option).toString()
        let currentTimeInfo = ``
        currentTimeInfo += `\n\n`
        currentTimeInfo += texts.numbers[currentHour[0]]
        currentTimeInfo += texts.numbers[currentHour[1]]
        currentTimeInfo += `<b>‚ïè</b>0Ô∏è‚É£0Ô∏è‚É£\n`

        if (resultObject[time_option].length > 0) {
          for (let game_option = 0; game_option < resultObject[time_option].length; game_option++) {
            let game = resultObject[time_option][game_option]
            if ((game.name).includes('(')) {
              game.name = (game.name).slice(0, (game.name).indexOf(`(`) - 1)
            }
            currentTimeInfo += texts.games[game.name]
            currentTimeInfo += `  `
            currentTimeInfo += game.name
            currentTimeInfo += `  <code>[–≥–æ–ª–æ—Å–æ–≤: ${(game.current_players).length}]</code>`
            
            if (game_option + 1 !== resultObject[time_option].length) {
              currentTimeInfo += `\n`
            }
          }
          normalResult += currentTimeInfo
        }
        if (resultObject[time_option].length === 0) {
          let choosenTime = (await player_timeAPI.get(player_id)).data
          choosenTime = choosenTime.map(time => time.time)
          if (choosenTime.includes(end_time - time_option)) {
            currentTimeInfo += `<pre>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤</pre>`
            normalResult += currentTimeInfo
          }
        }
      }

      return normalResult
    }
    // –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º, –∞ –Ω–µ –¥–≤—É–º–µ—Ä–Ω—ã–º –º–∞—Å—Å–∏–≤–æ–º
    if (typeof(resultObject) === `string`) {
      normalResult += `\n\n`
      if (resultObject === `not_enough_players`) {
        normalResult += texts.not_enough_players
      }
      if (resultObject === `no_time_left`) {
        normalResult += texts.no_time_left
      }
      if (resultObject === `cant_play`) {
        normalResult += texts.cant_play
      }
      if (resultObject === `incorrectly_filled_by_user`) {
        normalResult += texts.incorrectly_filled_by_user
      }
      return normalResult
    }
  }
  if (fullResult) {
    normalResult += `<b>–û–ë–©–ï–ï –†–ê–°–ü–ò–°–ê–ù–ò–ï</b>\n<i>–û–±–Ω–æ–≤–ª–µ–Ω–æ –≤ <b>${currentTime}</b></i>`
    for (let time_option = 0; time_option < resultObject.length; time_option++) {
      let currentHour = (end_time - time_option).toString()
      normalResult += `\n\n`
      normalResult += texts.numbers[currentHour[0]]
      normalResult += texts.numbers[currentHour[1]]
      normalResult += `<b>‚ïè</b>0Ô∏è‚É£0Ô∏è‚É£\n`
  
      if (resultObject[time_option].length > 0) {
        for (let game_option = 0; game_option < resultObject[time_option].length; game_option++) {
          let game = resultObject[time_option][game_option]
          if ((game.name).includes('(')) {
            game.name = (game.name).slice(0, (game.name).indexOf(`(`) - 1)
          }
          normalResult += texts.games[game.name]
          normalResult += `  `
          normalResult += game.name
          normalResult += `  <code>[–≥–æ–ª–æ—Å–æ–≤: ${(game.current_players).length}]</code>`
          if (game_option + 1 !== resultObject[time_option].length) {
            normalResult += `\n`
          }
        }
      }
      if (resultObject[time_option].length === 0) {
        normalResult += `<pre>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤</pre>`
      }
    }
    return normalResult
  }  
}


const createTimeOptions = async function (forPoll = false) {
  const currentDate = new Date()
  let hours = currentDate.getHours()
  let minutes = currentDate.getMinutes()
  let hh_mm = ('0' + currentDate.getHours().toString()).slice(-2) + ':' + ('0' + currentDate.getMinutes().toString()).slice(-2);
  //hours = 20
  //minutes = 50

  let time_options = [];
  for (let option = end_time; time_options.length < 10; option--) {
    if (hours !== option) {
      time_options.push(option.toString() + `:00`)
    }
    if (hours === option) {
      if (!forPoll) {
        if (minutes <= 55) {
          time_options.push(option.toString() + `:00`)
          break
        }
      }
      if (forPoll) {
        if (minutes <= 30) {
          time_options.push(`${hh_mm} (–º–æ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ä–æ—Å–∞)`)
          break
        }
      }
      break
    }
  }
  return time_options
}


const updateAllResultMessages = async function () {
  const fullResult = await createFilledResult()
  const normalFullResult = await setResultToNormal(fullResult, true)
  const currentHour = (new Date()).getHours()
  const currentMinutes = (new Date()).getMinutes()
  const leftMinutes = 60 - currentMinutes
  const players_with_results = (await player_voteAPI.getAll()).data
  for (let player_order = 0; player_order < players_with_results.length; player_order++) {
    let player_info = players_with_results[player_order]
    let player_settings = (await player_settingsAPI.get(player_info.player_id)).data
    try {
      // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –û–±—â–µ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
      if (player_settings[1].enabled) {

        if (player_settings[1].before_reminder === -1) {
          await editMessage(player_info.player_id, normalFullResult, player_info.full_result_message_id)
        }
        else {
          let time_check_id = end_time - currentHour - 1
          // –µ—Å–ª–∏ –Ω–µ—Ç –∏–≥—Ä –≤ –±–ª–∏–∂–∞–π—à–∏–π —á–∞—Å
          if (fullResult[time_check_id].length === 0) {
            await editMessage(player_info.player_id, normalFullResult, player_info.full_result_message_id)
          }
          else {
            if (leftMinutes !== player_settings[1].before_reminder) {
              await editMessage(player_info.player_id, normalFullResult, player_info.full_result_message_id)
            }
            else {
              await deleteMessage(player_info.player_id, player_info.full_result_message_id)
              let sentFullResult = await sendMessage(player_info.player_id, normalFullResult)
              await player_voteAPI.update(player_info.player_id, {full_result_message_id: sentFullResult})
            }
          }
        }
      }

      // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
      if (player_settings[0].enabled) {
        let personalResult = await createPersonalResult(player_info.player_id, fullResult)
        let normalPersonalResult = await setResultToNormal(personalResult, false, player_info.player_id)

        // –µ—Å–ª–∏ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –ø—É—Å—Ç—ã–º, —Ç–æ –æ–Ω–æ –ø–µ—Ä–µ–¥–∞—ë—Ç —Å—Ç—Ä–æ–∫—É, –∞ –Ω–µ –º–∞—Å—Å–∏–≤, –ø–æ—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–∏—Ç—å
        if (typeof(personalResult) === `string`) {
          await editMessage(player_info.player_id, normalPersonalResult, player_info.personal_result_message_id)
        }
        else {
          if (player_settings[0].before_reminder === -1) {
            await editMessage(player_info.player_id, normalPersonalResult, player_info.personal_result_message_id)
          }
          else {
            let time_check_id = end_time - currentHour - 1
            // –µ—Å–ª–∏ –Ω–µ—Ç –∏–≥—Ä –≤ –±–ª–∏–∂–∞–π—à–∏–π —á–∞—Å
            if (personalResult[time_check_id].length === 0) {
              await editMessage(player_info.player_id, normalPersonalResult, player_info.personal_result_message_id)
            }
            else {
              if (leftMinutes !== player_settings[0].before_reminder) {
                await editMessage(player_info.player_id, normalPersonalResult, player_info.personal_result_message_id)
              }
              else {
                await deleteMessage(player_info.player_id, player_info.personal_result_message_id)
                let sentPersonalResult = await sendMessage(player_info.player_id, normalPersonalResult)
                await player_voteAPI.update(player_info.player_id, {personal_result_message_id: sentPersonalResult})
              }
            }
          }
        }
      }

    } catch (error) {
      await sendMessage(admin, `–ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞`)
      //await sendMessage(admin, error.response.data.description)
      console.log(error)
    }
  }
}


const sendAllResultMessages = async function (player_id, player_vote = undefined) {
  const playerSettings = (await player_settingsAPI.get(player_id)).data
  const personalResultSettings = playerSettings[0]
  const fullResultSettings = playerSettings[1]
  const fullResult = await createFilledResult()

  if (!player_vote) {
    player_vote = (await player_voteAPI.get(player_id)).data
  }

  if (fullResultSettings.enabled) {
    if (player_vote.full_result_message_id === null) {
      const normalFullResult = await setResultToNormal(fullResult, true)
      const messageFullResult = await sendMessage(player_id, normalFullResult)
  
      await player_voteAPI.update(player_id, {full_result_message_id: messageFullResult})
    }
  }

  if (personalResultSettings.enabled) {
    if (player_vote.personal_result_message_id === null) {
      const personalResult = await createPersonalResult(player_id, fullResult)
      const normalPersonalResult = await setResultToNormal(personalResult, false, player_id)
      const messagePersonalResult = await sendMessage(player_id, normalPersonalResult)
      
      await player_voteAPI.update(player_id, {personal_result_message_id: messagePersonalResult})
    }
  }

}


const answerProcessing = async function (ctx) {
  const player = ctx.update.poll_answer.user.id
  const pollID = ctx.update.poll_answer.poll_id
  const options = ctx.update.poll_answer.option_ids
  const activePolls = (await pollsAPI.getAll()).data
  const player_vote = (await player_voteAPI.get(player)).data

  // –ø–µ—Ä–≤—ã–π –æ–ø—Ä–æ—Å (–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å)
  if (pollID === activePolls[0].poll_id) {
    if (options[0] === 0) {
      if (player_vote.polls_sent === 1) {
        if (activePolls[1].poll_id) {
          await forwardMessage(player, activePolls[1].message_id)
          return (await player_voteAPI.update(player, {polls_sent: 2, ready_to_play: true}))
        }
        // –µ—Å–ª–∏ –æ–ø—Ä–æ—Å–æ–≤ –≤—Å–µ–≥–æ 2 (–ø–æ–∑–¥–Ω–∏–π —Å–±–æ—Ä), —Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ä–∞–∑—É –æ–ø—Ä–æ—Å —Å –∏–≥—Ä–∞–º–∏, —Ç.–∫. –æ–ø—Ä–æ—Å –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è
        if (activePolls[2].poll_id === null) {
          await forwardMessage(player, activePolls[1].message_id)
          return (await player_voteAPI.update(player, {polls_sent: 3, ready_to_play: true}))
        }
        
      }
      if (player_vote.polls_sent >= 2) {
        return (await player_voteAPI.update(player, {ready_to_play: true}))
      }
    }

    if (options[0] === 1) {
      await sendMessage(player, texts.cantToday)
      return (await player_voteAPI.update(player, {ready_to_play: false}))
    }

    if (options.length === 0) {
      return (await player_voteAPI.update(player, {ready_to_play: false}))
    }
  }
  // –≤—Ç–æ—Ä–æ–π –æ–ø—Ä–æ—Å (–∏–≥—Ä—ã)
  if (pollID === activePolls[1].poll_id) {
    if (options.length > 0) {
      if (player_vote.polls_sent === 2) {
        await forwardMessage(player, activePolls[2].message_id)
        await player_voteAPI.update(player, {polls_sent: 3})
        return await player_gameAPI.create(player, options)
      }
      if (player_vote.polls_sent === 3) {
        return (await player_gameAPI.create(player, options))
      }
    }

    if (options.length === 0) {
      return (await player_gameAPI.delete(player))
    }
  }
  // —Ç—Ä–µ—Ç–∏–π –æ–ø—Ä–æ—Å (–≤—Ä–µ–º—è)
  if (pollID === activePolls[2].poll_id) {
    if (options.length > 0) {
      if (!player_vote.filled_all_polls) {
        await player_voteAPI.update(player, {filled_all_polls: true})
        await player_timeAPI.create(player, options)
        return (await sendAllResultMessages(player))
      }
      if (player_vote.filled_all_polls) {
        return (await player_timeAPI.create(player, options))
      }
    }
    
    if (options.length === 0) {
      return (await player_timeAPI.delete(player))
    }
  }
}


const privateStatus = async function (ctx) {
  const user_id = ctx.update.my_chat_member.chat.id
  const status = ctx.update.my_chat_member.new_chat_member.status

  if (status === 'kicked') {
    await playersAPI.update(user_id, false)
    // return console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å –±–æ—Ç–æ–º`)
  }
  if (status === 'member') {
    const created_at = Date.parse((await playersAPI.get(user_id)).data.was_created)
    const dataComparsion = (new Date() - created_at) / 1000 / 60;
    // –µ—Å–ª–∏ —Å –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ 30 –º–∏–Ω—É—Ç (–ø—Ä–∏–≤–µ–ª–∏ –≤—Ä–µ–º—è –≤—ã—à–µ –∫ –º–∏–Ω—É—Ç–∞–º)
    await addToMailing(user_id)
    if (dataComparsion > 30) {
      await playersAPI.update(user_id, true)
      const result = await ctx.reply(texts.welcomeBack, groupInvitationButtons)
    }
    // return console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å –±–æ—Ç–æ–º`)
  }
}


const groupStatus = async function (ctx, status) {
  if (status) {
    const user = ctx.update.message.new_chat_member.id
    //return console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user} –≤—Å—Ç—É–ø–∏–ª –≤ –≥—Ä—É–ø–ø—É`)
  }
  if (!status) {
    const user = ctx.update.message.left_chat_participant.id
    //return console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user} –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É`)
  }
}

//#endregion

//#region liveCatch



bot.start(async (ctx) => getStarted(ctx))
bot.on('my_chat_member', async (ctx) => await privateStatus(ctx))
bot.on('new_chat_members', async (ctx) => await groupStatus(ctx, true))
bot.on('left_chat_member', async (ctx) => await groupStatus(ctx, false))
bot.on('poll_answer', async (ctx) => await answerProcessing(ctx))

bot.action('delete', async (ctx) => {
  try {
    await ctx.deleteMessage()
  } catch (error) {
    ctx.reply(`–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ ‚Äî –º–Ω–µ —É–∂–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ –Ω–µ–ª—å–∑—è –µ–≥–æ —É–±—Ä–∞—Ç—å`)
  }
})

bot.command('assemble', async (ctx) => {
  const player_id = (ctx.message.from.id).toString()
  const created = (await playersAPI.get(player_id)).data
  if (created) {
    const polls = (await pollsAPI.getAll()).data
    const sender = ctx.update.message.from
    
    if (polls[0].message_id) {
      await sendMessage(sender.id, `–ù–∞ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –µ—Å—Ç—å –ê–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã`)
      return await ctx.deleteMessage()
    }
    else {
      await beforeMailing(polls, sender)
      return await ctx.deleteMessage()
    }
    
  }
  await sendMessage(player_id, texts.sorry)  
})

bot.command('invite', async (ctx) => {
  const player_id = (ctx.message.from.id).toString()
  const created = (await playersAPI.get(player_id)).data
  if (created) {
    await sendMessage(player_id, `–¢—ã –º–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –º–æ–∏–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º —Å–æ —Å–≤–æ–∏–º –¥—Ä—É–≥–æ–º.\n–ù–∏–∂–µ —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–æ–π —á–∞—Ç`)
    await sendMessage(player_id, `<b>https://t.me/deadly_party_bot</b>`)
    await sendMessage(player_id, `–ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ —Å –Ω–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –º–Ω–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç –Ω–µ–≥–æ –¢–≤–æ–π –∫–æ–¥.\n\n–≠—Ç–æ—Ç –∫–æ–¥ —Ç–≤–æ–µ–º—É –¥—Ä—É–≥—É –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ –º–Ω–µ –≤ —á–∞—Ç.\n<b>–ù–∏–∂–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å–∞–º –∫–æ–¥ (–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏)</b>`)
    await sendMessage(player_id, `<code>${player_id}</code>`)
    return await ctx.deleteMessage()
    //return await sendMessage(player_id, `–¢—ã –º–æ–∂–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –º–æ–∏–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ —Å–æ —Å–≤–æ–∏–º –¥—Ä—É–≥–æ–º ‚Äî –µ–º—É –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ –≤ —á–∞—Ç –¢–≤–æ–π –∫–æ–¥ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.\n<b>–ê –≤–æ—Ç –∏ —Å–∞–º –∫–æ–¥ (–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏)</b>:\n\n<code>${player_id}</code>`, 'HTML')
  }
  await sendMessage(player_id, texts.sorry)  
})

bot.command('group', async (ctx) => {
  const player_id = (ctx.message.from.id).toString()
  const created = (await playersAPI.get(player_id)).data
  if (created) {
    await ctx.replyWithHTML(texts.group, groupInvitationButtons)
    return await ctx.deleteMessage()
  }
  await sendMessage(player_id, texts.sorry)  
})

bot.command('settings', async (ctx) => {
  const player_id = (ctx.message.from.id).toString()
  const created = (await playersAPI.get(player_id)).data
  if (created) {
    await ctx.replyWithHTML(texts.forButtonPersonalReminder, await settingsButtons(ctx, true))
    return await ctx.deleteMessage()
  }
  await sendMessage(player_id, texts.sorry)  
})

bot.command('about', async (ctx) => {
  await ctx.replyWithHTML(texts.about)
  return await ctx.deleteMessage()
})

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
bot.action(personalActions, async (ctx) => await actionProcessing(ctx))
bot.action(fullActions, async (ctx) => await actionProcessing(ctx))

// –æ–±—Ä–∞–±–æ—Ç–∫–∞ –õ—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —É—Å–ª–æ–≤–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
bot.on('text', async (ctx) => textProcessing(ctx))

//#endregion

//#region Launch Servers

//DB Launch
const app = express()
app.use(express.json())

const playersRouter = require('./players/players.routes');
app.use('/', playersRouter)

const gamesRouter = require('./games/games.routes');
app.use('/', gamesRouter)

const pollsRouter = require('./polls/polls.routes');
app.use('/', pollsRouter)

const player_timeRouter = require('./player_time/player_time.routes');
app.use('/', player_timeRouter)

const player_gameRouter = require('./player_game/player_game.routes');
app.use('/', player_gameRouter)

const player_voteRouter = require('./player_vote/player_vote.routes');
app.use('/', player_voteRouter)

const player_settingsRouter = require('./player_settings/player_settings.routes');
app.use('/', player_settingsRouter)



const dbServer = function () {
  try {
    app.listen(PORT, console.log(`Server DB is started on port ${PORT}`))
  } catch (error) {
    console.log(error)
    console.log('DB could not start, all Error at the Top')
  }
}
dbServer()

// –ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã (–ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã). –ï—Å–ª–∏ –¥–∞, —Ç–æ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
setTimeout(async () => {
  const mainPollData = (await pollsAPI.get(1)).data.message_id;
  if (mainPollData) {
    return await enableResultUpdates()
  }
}, 1500);

//Bot launch
try {
  bot.launch()  
  console.log('Server Bot is started')
} catch (error) {
  console.log(error)
  console.log('Bot could not start, all Error at the Top')
}


// Enable graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'))
process.once('SIGTERM', () => bot.stop('SIGTERM'))
//#endregion

//#region Descriptions
/**
 * 
 * @param {number|undefined} sendMessage.parse_mode ('' (Usual), 'HTML', 'MarkdownV2)
 */
//#endregion

//#region DevRegion


const devFun = async function(id) {
  setTimeout(async () => {
    //await stopPolls()
    //sendMessage(admin, 123, deleteButton)
    //console.log(await sendMessage(admin, 123, testButton))
    //console.log(await editMessage(admin, 321, 3752, deleteButton))
    //console.log(await editMessage(admin, 123, 3752, testButton))
    
    //sendPoll(admin, `–õ—É—á—à–µ?`, [`–î–∞`,`–ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π`])
    /*
    let userTime = (await player_timeAPI.get(admin)).data
    userTime = userTime.map(timeOption => timeOption.time)
    console.log(userTime)
    */
   //
    
    //console.log(await createPersonalResult(admin, (await createFilledResult())))
    //sendAllResultMessages(player_id, player_vote)
    //console.log((await player_voteAPI.get(45)).data === '')

    //338497665
    
    /* // —Ä–∞—Å—Å—ã–ª–∫–∞ –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    const message = `–ü—Ä–∏–≤–µ—Ç!\n–£ –º–µ–Ω—è –ø—Ä–æ–∏–∑–æ—à–ª–æ <b>–∫—Ä—É–ø–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ</b> ‚Äî —Ç–µ–ø–µ—Ä—å —è –ø–µ—Ä–µ—à—ë–ª –≤ —Å—Ç–∞—Ç—É—Å –ë–µ—Ç–∞-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è! üòä\n\n<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b>\n<b>1.</b> –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–≥—Ä –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π –ø–æ –∏–≥—Ä–∞–º –∏ –≤—Ä–µ–º–µ–Ω–∏, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ª–µ–≥–∫–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—ë –≤—Ä–µ–º—è. –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º–æ–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å/–æ—Ç–∫–ª—é—á–∞—Ç—å (–æ–Ω–æ –±–µ–∑–∑–≤—É—á–Ω–æ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)\n<b>2.</b> –î–æ–±–∞–≤–ª–µ–Ω–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –ú–µ–Ω—é, –≥–¥–µ –º–æ–∂–Ω–æ:\n‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è–º, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –Ω–∞–±—Ä–∞–Ω–Ω—ã—Ö –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –∏–≥—Ä–∞—Ö. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è 30 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å 45, 30, 15, 5 –º–∏–Ω—É—Ç –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é). –°–∞–º–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—â—ë –¥–æ—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è\n‚Ä¢ –í 2 –∫–ª–∏–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–ø—Ä–æ—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è (–µ—Å–ª–∏ –æ–Ω–∏ –µ—â—ë –Ω–µ –∑–∞–ø—É—Å–∫–∞–ª–∏—Å—å)\n‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É, –≥–¥–µ –º–æ–∂–Ω–æ –∏ –æ–±—Å—É–¥–∏—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∏–≥—Ä—ã, –∏ –ø—Ä–æ—Å—Ç–æ –ø–æ—Ñ–ª—É–¥–∏—Ç—å`
    const enabled_users = await (await playersAPI.getAll(true)).data
    */
    
  }, 500);
}
//devFun(twinkByAdmin)
devFun(admin)

//#endregion
